//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Stock", Namespace="http://schemas.datacontract.org/2004/07/StockService")]
    [System.SerializableAttribute()]
    public partial class Stock : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CeoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmployeesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExchangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Hq_addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndustryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ListdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketcapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SectorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ceo {
            get {
                return this.CeoField;
            }
            set {
                if ((object.ReferenceEquals(this.CeoField, value) != true)) {
                    this.CeoField = value;
                    this.RaisePropertyChanged("Ceo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Employees {
            get {
                return this.EmployeesField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeesField, value) != true)) {
                    this.EmployeesField = value;
                    this.RaisePropertyChanged("Employees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Exchange {
            get {
                return this.ExchangeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExchangeField, value) != true)) {
                    this.ExchangeField = value;
                    this.RaisePropertyChanged("Exchange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hq_address {
            get {
                return this.Hq_addressField;
            }
            set {
                if ((object.ReferenceEquals(this.Hq_addressField, value) != true)) {
                    this.Hq_addressField = value;
                    this.RaisePropertyChanged("Hq_address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Industry {
            get {
                return this.IndustryField;
            }
            set {
                if ((object.ReferenceEquals(this.IndustryField, value) != true)) {
                    this.IndustryField = value;
                    this.RaisePropertyChanged("Industry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Listdate {
            get {
                return this.ListdateField;
            }
            set {
                if ((object.ReferenceEquals(this.ListdateField, value) != true)) {
                    this.ListdateField = value;
                    this.RaisePropertyChanged("Listdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Logo {
            get {
                return this.LogoField;
            }
            set {
                if ((object.ReferenceEquals(this.LogoField, value) != true)) {
                    this.LogoField = value;
                    this.RaisePropertyChanged("Logo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Marketcap {
            get {
                return this.MarketcapField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketcapField, value) != true)) {
                    this.MarketcapField = value;
                    this.RaisePropertyChanged("Marketcap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sector {
            get {
                return this.SectorField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorField, value) != true)) {
                    this.SectorField = value;
                    this.RaisePropertyChanged("Sector");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Symbol {
            get {
                return this.SymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolField, value) != true)) {
                    this.SymbolField = value;
                    this.RaisePropertyChanged("Symbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStocks", ReplyAction="http://tempuri.org/IService1/GetStocksResponse")]
        System.Data.DataSet GetStocks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStocks", ReplyAction="http://tempuri.org/IService1/GetStocksResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStocksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStock", ReplyAction="http://tempuri.org/IService1/GetStockResponse")]
        StockClient.ServiceReference1.Stock GetStock(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStock", ReplyAction="http://tempuri.org/IService1/GetStockResponse")]
        System.Threading.Tasks.Task<StockClient.ServiceReference1.Stock> GetStockAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddStock", ReplyAction="http://tempuri.org/IService1/AddStockResponse")]
        bool AddStock(StockClient.ServiceReference1.Stock s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddStock", ReplyAction="http://tempuri.org/IService1/AddStockResponse")]
        System.Threading.Tasks.Task<bool> AddStockAsync(StockClient.ServiceReference1.Stock s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateStock", ReplyAction="http://tempuri.org/IService1/updateStockResponse")]
        bool updateStock(StockClient.ServiceReference1.Stock s, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateStock", ReplyAction="http://tempuri.org/IService1/updateStockResponse")]
        System.Threading.Tasks.Task<bool> updateStockAsync(StockClient.ServiceReference1.Stock s, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStock", ReplyAction="http://tempuri.org/IService1/DeleteStockResponse")]
        bool DeleteStock(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStock", ReplyAction="http://tempuri.org/IService1/DeleteStockResponse")]
        System.Threading.Tasks.Task<bool> DeleteStockAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : StockClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<StockClient.ServiceReference1.IService1>, StockClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetStocks() {
            return base.Channel.GetStocks();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStocksAsync() {
            return base.Channel.GetStocksAsync();
        }
        
        public StockClient.ServiceReference1.Stock GetStock(int id) {
            return base.Channel.GetStock(id);
        }
        
        public System.Threading.Tasks.Task<StockClient.ServiceReference1.Stock> GetStockAsync(int id) {
            return base.Channel.GetStockAsync(id);
        }
        
        public bool AddStock(StockClient.ServiceReference1.Stock s) {
            return base.Channel.AddStock(s);
        }
        
        public System.Threading.Tasks.Task<bool> AddStockAsync(StockClient.ServiceReference1.Stock s) {
            return base.Channel.AddStockAsync(s);
        }
        
        public bool updateStock(StockClient.ServiceReference1.Stock s, int id) {
            return base.Channel.updateStock(s, id);
        }
        
        public System.Threading.Tasks.Task<bool> updateStockAsync(StockClient.ServiceReference1.Stock s, int id) {
            return base.Channel.updateStockAsync(s, id);
        }
        
        public bool DeleteStock(int id) {
            return base.Channel.DeleteStock(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteStockAsync(int id) {
            return base.Channel.DeleteStockAsync(id);
        }
    }
}
